# Reads a comma-separated file and generates a C++ header file with the item definitions
#
# The csv file must have the following columns:
# - Key
# - Value
# - caption
# - knot

list_name=$1

# if the list name is not provided, exit
if [ -z $list_name ]; then
  echo "Usage: $0 <list_name>"
  echo "Where list_name is the name of a csv file (without the .csv suffix) in the fdchallenge2 directory"
  exit 1
fi

(printf "LIST %s = " $list_name) > $list_name.LIST_DEFINITION
(printf "=== lookup_%s(p_%s, summary_only)\n{p_%s:\n" $list_name $list_name $list_name) > $list_name.CAPTION_LOOKUP

(printf "===  %s_slugs\n" $list_name) > $list_name.YARN

csv_file="fdchallenge2/$list_name.tsv"
cat $csv_file | while read -r line; do

  key=$(echo -e "$line" | cut  -f1)
  value=$(echo -e "$line" | cut -f2)
  caption=$(echo -e "$line" | cut  -f3)


  (printf "%s=%d, "  $key $value) >> $list_name.LIST_DEFINITION

  # Item choice
  (printf "\t%s: \n"  "-"$key) >> $list_name.CAPTION_LOOKUP


  # emit action in curly braces in case it has interpolation
  (printf "\t{summary_only:\n%s\n" "$caption") >> $list_name.CAPTION_LOOKUP
  (printf "\t%selse:\n\t\t<- %s_slugs.slug_%s\n\t}\n"  "-" $list_name $key) >> $list_name.CAPTION_LOOKUP
  (printf "\n = slug_%s\nTODO %s description to be written\n->DONE\n"  $key $key) >> $list_name.YARN
done
(printf "\n}->->\n\n") >> $list_name.CAPTION_LOOKUP

(printf "NUL=0\n\n") >> $list_name.LIST_DEFINITION

cat <<EOH > $list_name.generated.ink
/* ----------------------------------------
  Generated by item_generator.sh
  on $(date)
  From file: $csv_file
---------------------------------------- */

EOH
cat $list_name.LIST_DEFINITION  $list_name.CAPTION_LOOKUP $list_name.YARN >> ${list_name}_generated.ink

rm $list_name.LIST_DEFINITION $list_name.CAPTION_LOOKUP $list_name.YARN

echo "Generated ${list_name}_generated.ink"

